#!/bin/bash

BENCHMARK="$1"

echo "Begining tests for '${BENCHMARK}' benchmark"

source ./config
source ./json-tools
source ./json-setup
source ./settings/"${BENCHMARK}"

# Confirm we have a useful pgbench to run
if [ -z $PGBENCHBIN ] || [ ! -x $PGBENCHBIN ]; then
  echo ERROR:  cannot find pgbench binary $PGBENCHBIN , aborting
  exit
fi

TESTPSQL="psql -h $TESTHOST -U $TESTUSER -p $TESTPORT -d $TESTDB"

# See if this database has all the standard pgbench tables in it
PGCOUNT=`$TESTPSQL -A -t -c "SELECT count(*)  FROM pg_stat_user_tables WHERE relname IN ('pgbench_history','pgbench_tellers','pgbench_accounts','pgbench_branches')"`
if [ "$PGCOUNT" -eq 4 ] ; then
  TABLEPREFIX="pgbench_"
  PGBENCH_TABLES=1
else
  TABLEPREFIX=""
  PGCOUNT=`$TESTPSQL -A -t -c "SELECT count(*)  FROM pg_stat_user_tables WHERE relname IN ('history','tellers','accounts','branches')"`
  if [ "$PGCOUNT" -eq 4 ] ; then
    PGBENCH_TABLES=1
  else
    PGBENCH_TABLES=0
  fi
fi

# Make sure the configured test script actually exists
if [ "${SCRIPT_IS_PREFIX}" -neq "1" ] && \
   [ "${SCRIPT}" != "${JSON_INSERT_FILE}" ] && \
   [ ! -f "${TESTDIR}/${SCRIPT}" ]; then
  echo "ERROR: cannot find test script ${TESTDIR}/${SCRIPT}, aborting"
  exit
fi

for TEST_JSON_TABLE in $TEST_JSON_TABLES; do
  #
  # Create a new test set for this JSON indexing strategy
  #
  ./newset "${BENCHMARK}_${TEST_JSON_TABLE}"

  for SCALE in $SCALES; do
    #
    # Have a consistent, clean set of pgbench tables to start 
    # each test run with
    #
    if [ "$SKIPINIT" -ne "1" ]; then
      if [ "$PGBENCH_TABLES" -eq "1" ] ; then
        echo Removing old pgbench tables
        $TESTPSQL -c "drop table ${TABLEPREFIX}accounts; drop table ${TABLEPREFIX}branches; drop table ${TABLEPREFIX}tellers; drop table ${TABLEPREFIX}history;"
      fi
      $TESTPSQL -c "vacuum"

      echo Creating new pgbench tables
      $PGBENCHBIN -i -s $SCALE -h $TESTHOST -U $TESTUSER -p $TESTPORT $TESTDB
    fi

    #
    # Have a consistent, clean JSON benchmark table to start
    # each test run with
    #
    if [ "${JSON_INIT}" -eq "1" ]; then
      create_benchmark_table "${TEST_JSON_TABLE}"
      
      if [ "${TEST_JSON_TABLE}" = "${TABLE_JSON_GIN}" ]; then
        create_benchmark_index_gin "${TEST_JSON_TABLE}"
      elif [ "${TEST_JSON_TABLE}" = "${TABLE_JSON_JPO}" ]; then
        create_benchmark_index_jpo "${TEST_JSON_TABLE}"
      fi
      
      generate_benchmark_data "${TEST_JSON_TABLE}" "${SCALE}"

      #
      # Insert sample data, but only if we aren't benchmarking inserts
      #
      if [ "${SCRIPT}" != "${JSON_INSERT_FILE}" ]; then
        insert_benchmark_data
      fi
    fi 

    #
    # Run the main test
    #
    for (( t=1; t<=$SETTIMES; t++ )); do
      for c in $SETCLIENTS; do
        if [ -z "$SETRATES" ] ; then
          echo Run set \#$t of $SETTIMES with $c clients scale=$SCALE
          ./benchwarmer $BENCHMARK $TEST_JSON_TABLE $SCALE $c
        else
          for r in $SETRATES; do
            echo Run set \#$t of $SETTIMES with $c clients scale=$SCALE rate=$r
            ./benchwarmer $BENCHMARK $TEST_JSON_TABLE $SCALE $c $r
          done 
        fi
        echo
      done
    done
  done
done

./webreport "$BENCHMARK"
